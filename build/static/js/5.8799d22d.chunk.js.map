{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.jsx","services/MarvelService.jsx","hooks/http.hook.jsx","components/pages/SingleComicPage.jsx"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","View","comic","className","to","SingleComicPage","setComic","comicId","useParams","useEffect","updateComic","onComicLoaded","then","errorMessage","spinner","content"],"mappings":"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","file":"static/js/5.8799d22d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\tconst { loading, request, error, clearError } = useHttp();\n\n\tconst _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n\tconst _apiKey = \"apikey=f812955ce4ccbd38381d99c4c1e401be\";\n\tconst _baseOffset = 210;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects.language || \"en-us\",\n\t\t\tprice: comics.prices.price\n\t\t\t\t? `${comics.prices.price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn { loading, error, getAllCharacters, getCharacter, clearError, getComic, getAllComics };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [error, setError] = useState(null);\n\n\tconst request = useCallback(\n\t\tasync (\n\t\t\turl,\n\t\t\tmethod = \"GET\",\n\t\t\tbody = null,\n\t\t\theaders = { \"Content-Type\": \"application/json\" }\n\t\t) => {\n\t\t\tsetLoading(true);\n\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url, { method, body, headers });\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Could not fetch ${url}, status: ${response.status}`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst data = await response.json();\n\n\t\t\t\tsetLoading(false);\n\t\t\t\treturn data;\n\t\t\t} catch (e) {\n\t\t\t\tsetLoading(false);\n\t\t\t\tsetError(e.message);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\t[]\n\t);\n\n\tconst clearError = useCallback(() => setError(null), []);\n\n\treturn { loading, request, error, clearError };\n};\n","import { useState, useEffect } from \"react\";\nimport { useParams, Link } from 'react-router-dom';\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport './singleComicPage.scss';\n\n\nconst SingleComicPage = () => {\n\tconst [comic, setComic] = useState(null)\n\tconst {comicId} = useParams();\n\tconst {loading, error, getComic} = useMarvelService();\n\n\tuseEffect (() => {\n\t\tupdateComic();\n\t}, [comicId])\n\n\tconst onComicLoaded = (comic) => {\n\t\tsetComic(comic);\n\t};\n\n\tconst updateComic = () => {\n\t\tgetComic(comicId)\n\t\t\t.then(onComicLoaded)\n\t};\n\n\t\n\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading ? <Spinner /> : null;\n\tconst content = !(loading || error || !comic) ? (\n\t\t<View comic={comic} />\n\t) : null;\n\n    return (\n\t\t<>\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t</>\n    )\n}\n\nconst View = ({comic}) => {\n\tconst {title, description, pageCount, thumbnail, language, price} = comic;\n\treturn(\n\t\t<div className=\"single-comic\">\n\t\t\t<img src={thumbnail} alt={title} className=\"single-comic__img\"/>\n\t\t\t<div className=\"single-comic__info\">\n\t\t\t\t\t<h2 className=\"single-comic__name\">{title}</h2>\n\t\t\t\t\t<p className=\"single-comic__descr\">{description}</p>\n\t\t\t\t\t<p className=\"single-comic__descr\">{pageCount}</p>\n\t\t\t\t\t<p className=\"single-comic__descr\">{language}</p>\n\t\t\t\t\t<div className=\"single-comic__price\">{price}</div>\n\t\t\t</div>\n\t\t\t<Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\n\t\t</div>\n\t)\n}\n\nexport default SingleComicPage;"],"sourceRoot":""}